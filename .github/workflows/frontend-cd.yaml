name: Frontend Continuous Deployment
on:
  push:
    branches:
      - main
    # paths:
    #   - frontend/**

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-  

      - name: Install NPM dependencies
        run: cd frontend && npm ci
      - name: Lint code
        run: cd frontend && npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: latest
    - name: Cache NPM dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-npm-cache-

    - name: Install NPM dependencies
      run: cd frontend && npm ci

    - name: Test code
      run: cd frontend/src && npm run test

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build Docker image
        run: |
          cd frontend
          docker build -t frontend --build-arg REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL .
      
      - name: Save Docker image
        run: docker save --output frontend.tar frontend

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: /tmp/frontend.tar

  login-ecr:
    runs-on: ubuntu-latest
    needs: build
    steps:
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ secrets.AWS_REGION }}
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

  push-image:
    runs-on: ubuntu-latest
    needs: login-ecr
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/frontend.tar

      - name: Push image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: push-image
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with: 
          version: 'latest'

      - name: Setup kustomize
        uses: imranismail/setup-kustomize@v2
        with: 
          version: 'latest'
          
      - name: Deploy to EKS cluster
        run: |
          echo "${{ secrets.AWS_ACCOUNT_ID }}" > kubeconfig.yaml
          cd backend/k8s && kustomize build
          cd .. && kubectl apply -f frontend/k8s --kubeconfig=kubeconfig.yaml
